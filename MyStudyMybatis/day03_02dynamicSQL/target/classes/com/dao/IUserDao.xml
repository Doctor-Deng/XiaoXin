<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 是确定哪个接口 -->
 <mapper namespace="com.dao.IUserDao">

    <!-- 如果在 User 实体中的属性，和数据库的一致，就不用进行这种配置-->
    <!-- 配置  查询结果的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="uSer">
        <!-- 主键字段的对应配置 -->
        <id property="userId" column="id"></id>

        <!-- 非主键字段的对应配置 -->
        <result property="userName" column="username"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
        <result property="userAddress" column="address"></result>

    </resultMap>

    <!-- 重复的 sql 语句可以定义起来用 -->
    <sql id="defaultUser">
        select * from user
    </sql>
    <!-- id 是确定哪个方法 resultType 表示封装到哪里去 -->
    <select id="findAll" resultMap="userMap">
        <!-- 查询所有的操作 -->
        <!-- select id as userId, username as userName, birthday as userBirthday, sex as userSex, address as userAdress from user; -->
        <include refid="defaultUser"></include>
    </select>

    <!-- 根据 id 查询用户 -->
    <select id="findById" parameterType="int" resultType="com.domain.User">
        select * from user where id=#{uid}
    </select>

    <!-- 根据名称模糊查询用户 -->
    <select id="findByName" parameterType="string" resultType="com.domain.User">
           <!-- 注意，第一种写法的 ${value} 是固定的，不能改其它的名字。相比第二种写法，好处就是在测试类中 testfindByName 里面的名字不用写 % 了-->
           select * from user where username like '%${value}%'
           <!-- 第二种写法 -->
           <!-- select * from user where username like #{name} -->
    </select>

    <!-- 根据 queryVo 的条件查询用户 -->
    <select id="findUserByVo" parameterType="com.domain.QueryVo" resultType="com.domain.User">
        select * from user where username like #{user.userName};
    </select>

    <!-- 根据条件查询 -->
    <!--<select id="findUserByCondition" resultMap="userMap" parameterType="user">-->
        <!--select * from user where 1=1-->
        <!--<if test="userName != null">-->
            <!--and username = #{userName}-->
        <!--</if>-->
        <!--<if test="userSex != null">-->
            <!--and sex = #{userSex}-->
        <!--</if>-->
    <!--</select>-->

    <select id="findUserByCondition" resultMap="userMap" parameterType="user">
        select * from user
          <where>
              <if test="userName != null">
                  and username = #{userName}
              </if>
              <if test="userSex != null">
                  and sex = #{userSex}
              </if>
          </where>
    </select>

    <!-- 根据 queryvo 中的 id 集合实现查询用户列表 -->
    <select id="fingUserInIds" resultMap="userMap" parameterType="queryvo">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in(" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
</mapper>